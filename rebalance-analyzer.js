const fs = require('fs');

// –ó–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ
const rawData = JSON.parse(fs.readFileSync('data.json', 'utf8'));
const pool = rawData.data.clPool;

function parseEvents(events) {
  return events.map(e => ({
    owner: e.owner,
    tickLower: parseInt(e.tickLower),
    tickUpper: parseInt(e.tickUpper),
    timestamp: parseInt(e.timestamp),
    amount0: parseFloat(e.amount0),
    amount1: parseFloat(e.amount1),
  }));
}

function tickToPrice(tick) {
  return Math.pow(1.0001, tick);
}

function formatDate(timestamp) {
  return new Date(timestamp * 1000).toLocaleString();
}

function calculatePriceRange(tickLower, tickUpper) {
  const priceLower = tickToPrice(tickLower);
  const priceUpper = tickToPrice(tickUpper);
  return { priceLower, priceUpper };
}

function calculateRangeWidth(priceLower, priceUpper) {
  return ((priceUpper - priceLower) / priceLower) * 100;
}

function calculateStatistics(rebalances) {
  if (rebalances.length === 0) return null;

  const stats = {
    totalRebalances: rebalances.length,
    uniqueAddresses: new Set(rebalances.map(r => r.owner)).size,
    averageTimeBetweenBurnAndMint: 0,
    maxTimeBetweenBurnAndMint: 0,
    minTimeBetweenBurnAndMint: Infinity,
    
    averageOldRangeWidth: 0,
    averageNewRangeWidth: 0,
    
    totalOldAmount0: 0,
    totalOldAmount1: 0,
    totalNewAmount0: 0,
    totalNewAmount1: 0,
    
    timeDistribution: {
      under1min: 0,
      under5min: 0,
      under30min: 0,
      under1hour: 0,
      over1hour: 0
    },

    firstRebalanceDate: formatDate(rebalances[0].timestamp),
    lastRebalanceDate: formatDate(rebalances[rebalances.length - 1].timestamp),
  };

  rebalances.forEach(rebalance => {
    // –í—Ä–µ–º—è –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    stats.averageTimeBetweenBurnAndMint += rebalance.timeDiff;
    stats.maxTimeBetweenBurnAndMint = Math.max(stats.maxTimeBetweenBurnAndMint, rebalance.timeDiff);
    stats.minTimeBetweenBurnAndMint = Math.min(stats.minTimeBetweenBurnAndMint, rebalance.timeDiff);

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (rebalance.timeDiff < 60) stats.timeDistribution.under1min++;
    else if (rebalance.timeDiff < 300) stats.timeDistribution.under5min++;
    else if (rebalance.timeDiff < 1800) stats.timeDistribution.under30min++;
    else if (rebalance.timeDiff < 3600) stats.timeDistribution.under1hour++;
    else stats.timeDistribution.over1hour++;

    // –®–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    const oldRangeWidth = calculateRangeWidth(rebalance.oldPosition.priceLower, rebalance.oldPosition.priceUpper);
    const newRangeWidth = calculateRangeWidth(rebalance.newPosition.priceLower, rebalance.newPosition.priceUpper);
    stats.averageOldRangeWidth += oldRangeWidth;
    stats.averageNewRangeWidth += newRangeWidth;

    // –°—É–º–º–∞—Ä–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
    stats.totalOldAmount0 += Math.abs(rebalance.oldPosition.amount0);
    stats.totalOldAmount1 += Math.abs(rebalance.oldPosition.amount1);
    stats.totalNewAmount0 += Math.abs(rebalance.newPosition.amount0);
    stats.totalNewAmount1 += Math.abs(rebalance.newPosition.amount1);
  });

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  stats.averageTimeBetweenBurnAndMint /= rebalances.length;
  stats.averageOldRangeWidth /= rebalances.length;
  stats.averageNewRangeWidth /= rebalances.length;

  return stats;
}

function matchRebalances(mints, burns, timeWindow = 3600) {
  let rebalances = [];
  const burnsByOwner = {};

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ burns –ø–æ owner
  for (const burn of burns) {
    if (!burnsByOwner[burn.owner]) burnsByOwner[burn.owner] = [];
    burnsByOwner[burn.owner].push(burn);
  }

  // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ mint –ø–æ–¥—Ö–æ–¥—è—â–∏–π burn
  for (const mint of mints) {
    const userBurns = burnsByOwner[mint.owner] || [];

    const matchIndex = userBurns.findIndex(burn =>
      Math.abs(mint.timestamp - burn.timestamp) < timeWindow &&
      (mint.tickLower !== burn.tickLower || mint.tickUpper !== burn.tickUpper)
    );

    if (matchIndex !== -1) {
      const burn = userBurns[matchIndex];
      
      // –†–∞—Å—Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const timeDiff = Math.abs(mint.timestamp - burn.timestamp);
      const oldRange = calculatePriceRange(burn.tickLower, burn.tickUpper);
      const newRange = calculatePriceRange(mint.tickLower, mint.tickUpper);
      
      rebalances.push({
        owner: mint.owner,
        timestamp: mint.timestamp,
        timeDiff,
        oldPosition: {
          tickLower: burn.tickLower,
          tickUpper: burn.tickUpper,
          priceLower: oldRange.priceLower,
          priceUpper: oldRange.priceUpper,
          amount0: burn.amount0,
          amount1: burn.amount1,
        },
        newPosition: {
          tickLower: mint.tickLower,
          tickUpper: mint.tickUpper,
          priceLower: newRange.priceLower,
          priceUpper: newRange.priceUpper,
          amount0: mint.amount0,
          amount1: mint.amount1,
        }
      });

      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π burn
      userBurns.splice(matchIndex, 1);
    }
  }

  return rebalances;
}

const mints = parseEvents(pool.mints);
const burns = parseEvents(pool.burns);

const rebalances = matchRebalances(mints, burns);
const stats = calculateStatistics(rebalances);

console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞:`);
console.log(`‚Üí –¢–∏–∫ —Å–ø–µ–π—Å–∏–Ω–≥: ${pool.tickSpacing}`);
console.log(`‚Üí –¢–µ–∫—É—â–∏–π —Ç–∏–∫: ${pool.tick} (—Ü–µ–Ω–∞: $${tickToPrice(pool.tick).toFixed(4)})`);
console.log(`‚Üí –í—Å–µ–≥–æ mint –æ–ø–µ—Ä–∞—Ü–∏–π: ${mints.length}`);
console.log(`‚Üí –í—Å–µ–≥–æ burn –æ–ø–µ—Ä–∞—Ü–∏–π: ${burns.length}`);
console.log('---');

console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–æ–≤:');
console.log(`‚Üí –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–∞–ª–∞–Ω—Å–æ–≤: ${stats.totalRebalances}`);
console.log(`‚Üí –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ${stats.uniqueAddresses}`);
console.log(`‚Üí –ü–µ—Ä–≤—ã–π —Ä–µ–±–∞–ª–∞–Ω—Å: ${stats.firstRebalanceDate}`);
console.log(`‚Üí –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–±–∞–ª–∞–Ω—Å: ${stats.lastRebalanceDate}`);
console.log('---');

console.log('\n‚è±Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:');
console.log(`‚Üí –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É burn –∏ mint: ${stats.averageTimeBetweenBurnAndMint.toFixed(1)} —Å–µ–∫`);
console.log(`‚Üí –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${stats.minTimeBetweenBurnAndMint} —Å–µ–∫`);
console.log(`‚Üí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${stats.maxTimeBetweenBurnAndMint} —Å–µ–∫`);
console.log('\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:');
console.log(`‚Üí –î–æ 1 –º–∏–Ω—É—Ç—ã: ${stats.timeDistribution.under1min} (${(stats.timeDistribution.under1min/stats.totalRebalances*100).toFixed(1)}%)`);
console.log(`‚Üí 1-5 –º–∏–Ω—É—Ç: ${stats.timeDistribution.under5min} (${(stats.timeDistribution.under5min/stats.totalRebalances*100).toFixed(1)}%)`);
console.log(`‚Üí 5-30 –º–∏–Ω—É—Ç: ${stats.timeDistribution.under30min} (${(stats.timeDistribution.under30min/stats.totalRebalances*100).toFixed(1)}%)`);
console.log(`‚Üí 30-60 –º–∏–Ω—É—Ç: ${stats.timeDistribution.under1hour} (${(stats.timeDistribution.under1hour/stats.totalRebalances*100).toFixed(1)}%)`);
console.log(`‚Üí –ë–æ–ª–µ–µ —á–∞—Å–∞: ${stats.timeDistribution.over1hour} (${(stats.timeDistribution.over1hour/stats.totalRebalances*100).toFixed(1)}%)`);
console.log('---');

console.log('\nüìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤:');
console.log(`‚Üí –°—Ä–µ–¥–Ω—è—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${stats.averageOldRangeWidth.toFixed(2)}%`);
console.log(`‚Üí –°—Ä–µ–¥–Ω—è—è —à–∏—Ä–∏–Ω–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${stats.averageNewRangeWidth.toFixed(2)}%`);
console.log('---');

console.log('\nüíß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:');
console.log('–°—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏:');
console.log(`‚Üí –í—Å–µ–≥–æ token0: ${stats.totalOldAmount0.toFixed(4)}`);
console.log(`‚Üí –í—Å–µ–≥–æ token1: ${stats.totalOldAmount1.toFixed(4)}`);
console.log('–ù–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏:');
console.log(`‚Üí –í—Å–µ–≥–æ token0: ${stats.totalNewAmount0.toFixed(4)}`);
console.log(`‚Üí –í—Å–µ–≥–æ token1: ${stats.totalNewAmount1.toFixed(4)}`);
console.log('---');
